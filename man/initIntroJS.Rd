% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/FrissIntroJS.R
\name{initIntroJS}
\alias{initIntroJS}
\title{Starts Intro JS}
\usage{
initIntroJS(session, dfIntro, lstDynamicValues = NA, nextPage = NA)
}
\arguments{
\item{dfIntro}{data frame with three columns: 'intro','element' and 'position'.
Each row in this data frame represents an introJS step. The column 'intro' contains the messages to show.
'Element' contains the css selectors for the elements to display the message for. If NA the message will be displayed as general message.
'position' will be the position of the introJS message}

\item{lstDynamicValues}{list with loopup table consisting of key/value pairs to be replaced in the help text.
This can be used to create data driven help content.}

\item{nextPage}{value of the next page tab to be displayed when the nextpage button is clicked within the help.
       if this value is left empty no next page button will be displayed.}

\item{Shiny}{session id}
}
\description{
Starts Intro JS
}
\examples{
\dontrun{
 // The folowing example assume a shiny app with that contains two divs with ids 'slider' and 'pie'
 // The code should put in server.r

 // Construct a data frame for a page containing a div with ID 'slider and a div with id 'pie'
 // The first row of the dataframe in this example does not contain an element and will be shown as general message
 RV$appHelp <- data.frame(intro=c('General intro message','this is a slider with val \%val1\%','this is a pie'),element=c(NA,'#slider','#pie'),position=c(NA,NA,'right'),stringsAsFactors=FALSE)
 // This second data frame will construct a look up table with dynamic values.
 // This will cause \%val1\% in the help to be replaced by the value 100
 lstDynamicValues <- list()
 lstDynamicValues['\%val1\%'] <- '100'

 observeEvent(RV$appHelp,{
       initIntroJS(session,RV$appHelp,dfDynamicValues)
  })
}
}

